// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/abeychain/go-abey/common"
	"github.com/abeychain/go-abey/common/hexutil"
	"github.com/abeychain/go-abey/common/math"
	"github.com/abeychain/go-abey/core/types"
)

var _ = (*snailHeaderMarshaling)(nil)

func (b snailHeader) MarshalJSON() ([]byte, error) {
	type snailHeader struct {
		ParentHash       	common.Hash
		Miner				common.Address
		PointerHash			common.Hash
		PointerNumber		*math.HexOrDecimal256
		FruitsHash			common.Hash
		FastHash			common.Hash
		FastNumber			*math.HexOrDecimal256
		SignHash			common.Hash
		Difficulty			*math.HexOrDecimal256
		FruitDifficulty		*math.HexOrDecimal256
		Number				*math.HexOrDecimal256
		PublicKey			hexutil.Bytes
		Timestamp			*math.HexOrDecimal256
		ExtraData			hexutil.Bytes
		MixHash				common.Hash
		Nonce				types.BlockNonce
	}

	var enc snailHeader
	enc.ParentHash = b.ParentHash
	enc.Miner = b.Miner
	enc.PointerHash = b.PointerHash
	enc.PointerNumber = (*math.HexOrDecimal256)(b.PointerNumber)
	enc.FruitsHash = b.FruitsHash
	enc.FastHash = b.FastHash
	enc.FastNumber = (*math.HexOrDecimal256)(b.FastNumber)
	enc.SignHash = b.SignHash
	enc.Difficulty = (*math.HexOrDecimal256)(b.Difficulty)
	enc.FruitDifficulty = (*math.HexOrDecimal256)(b.FruitDifficulty)
	enc.Number = (*math.HexOrDecimal256)(b.Number)
	enc.PublicKey = b.PublicKey
	enc.Timestamp = (*math.HexOrDecimal256)(b.Timestamp)
	enc.ExtraData = b.ExtraData
	enc.MixHash = b.MixHash
	enc.Nonce = b.Nonce

	return json.Marshal(&enc)
}

func (b *snailHeader) UnmarshalJSON(input []byte) error {
	type snailHeader struct {
		ParentHash       	*common.Hash
		Miner				*common.Address
		PointerHash			*common.Hash
		PointerNumber		*math.HexOrDecimal256
		FruitsHash			*common.Hash
		FastHash			*common.Hash
		FastNumber			*math.HexOrDecimal256
		SignHash			*common.Hash
		Difficulty			*math.HexOrDecimal256
		FruitDifficulty		*math.HexOrDecimal256
		Number				*math.HexOrDecimal256
		PublicKey			*hexutil.Bytes
		Timestamp			*math.HexOrDecimal256
		ExtraData			*hexutil.Bytes
		MixHash				*common.Hash
		Nonce				*types.BlockNonce
	}


	var dec snailHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}

	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.Miner != nil {
		b.Miner = *dec.Miner
	}
	if dec.PointerHash != nil {
		b.PointerHash = *dec.PointerHash
	}
	if dec.PointerNumber != nil {
		b.PointerNumber = (*big.Int)(b.PointerNumber)
	}
	if dec.FruitsHash != nil {
		b.FruitsHash = *dec.FruitsHash
	}
	if dec.FastHash != nil {
		b.FastHash = *dec.FastHash
	}
	if dec.FastNumber != nil {
		b.FastNumber = (*big.Int)(dec.FastNumber)
	}
	if dec.SignHash != nil {
		b.SignHash = *dec.SignHash
	}
	if dec.Difficulty != nil {
		b.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.FruitDifficulty != nil {
		b.FruitDifficulty = (*big.Int)(dec.FruitDifficulty)
	}
	if dec.Number != nil {
		b.Number = (*big.Int)(dec.Number)
	}
	if dec.PublicKey != nil {
		b.PublicKey = *dec.PublicKey
	}
	if dec.Timestamp != nil {
		b.Timestamp = (*big.Int)(dec.Timestamp)
	}
	if dec.ExtraData != nil {
		b.ExtraData = *dec.ExtraData
	}
	if dec.MixHash != nil {
		b.MixHash = *dec.MixHash
	}
	if dec.Nonce != nil {
		b.Nonce = *dec.Nonce
	}

	return nil
}
